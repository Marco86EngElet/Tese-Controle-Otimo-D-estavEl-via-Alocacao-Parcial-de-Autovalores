%programa para executar controle otimo misto com alocacao parcial de polos

XP  = sdpvar(n_ola,n_ola,'symmetric');
WP  = sdpvar(n_u,n_ola,'full');
LMIs_CMHP = XP>=eps*eye(n_ola);

if ~isempty(alpha_v)
    Tilde_AxValpha = Tilde_Ax+alpha_v*eye(n_ola);
    LMIs_CMHP = [ LMIs_CMHP, Tilde_AxValpha*XP+XP*Tilde_AxValpha'+...
             Tilde_Bu*WP+WP'*Tilde_Bu'<=-eps*eye(n_ola)  ];
end

if ~isempty(beta_v)
    Tilde_AxVbeta = -Tilde_Ax-beta_v*eye(n_ola);
    LMIs_CMHP = [ LMIs_CMHP, Tilde_AxVbeta*XP+XP*Tilde_AxVbeta'-...
             Tilde_Bu*WP-WP'*Tilde_Bu'<=-eps*eye(n_ola) ];
end

if ~isempty(r_d)
    Tilde_AxDqr = Tilde_Ax+q_d*eye(n_ola); 
    LMIs_CMHP = [ LMIs_CMHP,...
            [ -r_d*XP, Tilde_AxDqr*XP+Tilde_Bu*WP;...
              XP*Tilde_AxDqr'+WP'*Tilde_Bu', -r_d*XP ]...
              <=-eps*eye(2*n_ola)    ];
end

if ~isempty(theta_s)
    Tilde_Axsin = Tilde_Ax*sin(theta_s);
    Tilde_Axcos = Tilde_Ax*cos(theta_s);
    Tilde_Busin = Tilde_Bu*sin(theta_s);
    Tilde_Bucos = Tilde_Bu*cos(theta_s);
    LMIs_CMHP =[ LMIs_CMHP,...
            [ Tilde_Axsin*XP+XP*Tilde_Axsin'+...
              Tilde_Busin*WP+WP'*Tilde_Busin',...
              Tilde_Axcos*XP-XP*Tilde_Axcos'+...
              Tilde_Bucos*WP-WP'*Tilde_Bucos';...
              XP*Tilde_Axcos'-Tilde_Axcos*XP+...
              WP'*Tilde_Bucos'-Tilde_Bucos*WP,...
              Tilde_Axsin*XP+XP*Tilde_Axsin'+...
              Tilde_Busin*WP+WP'*Tilde_Busin'...
            ]<=-eps*eye(2*n_ola) ];
end

if ~isempty(w_H)
    LMIs_CMHD =[ LMIs_CMHP,...
            [ -w_H*XP,...
              XP*Tilde_Ax'-Tilde_Ax*XP+...
              WP'*Tilde_Bu'-Tilde_Bu*WP;...
              Tilde_Ax*XP-XP*Tilde_Ax'+...
              Tilde_Bu*WP-WP'*Tilde_Bu',...
              -w_H*XP...
            ]<=-eps*eye(2*n_ola) ];
end 

 if ~isempty(e_P)
    Tilde_AxPe = (Lambda-e_P*eye(n_ola))/2;                
    LMIs_CMHP = [ LMIs_CMHP,...
                [   Tilde_AxPe*XP+XP*Tilde_AxPe'+...
                    Tilde_Bu/2*WP+WP'*Tilde_Bu'/2,...
                    -Tilde_Ax*XP-Tilde_Bu*WP;...
                    -XP*Tilde_Ax'-WP'*Tilde_Bu',...
                    Tilde_Ax*XP/2+XP*Tilde_Ax'/2+...
                    Tilde_Bu/2*WP+WP'*Tilde_Bu'/2 ...
                ]<=-eps*eye(2*n_ola)...
            ];    
end

if ~isempty(c_H2)

    YH2 = sdpvar(n_y,n_y,'symmetric');
    pH2 = sdpvar(1,1,'symmetric');   
    LMIs_CMHP = [ LMIs_CMHP, Tilde_Ax*XP+XP*Tilde_Ax'+...
             Tilde_Bu*WP+WP'*Tilde_Bu'+...
             Tilde_Bd*Tilde_Bd'<=-eps*eye(n_ola) ];
    LMIs_CMHP = [ LMIs_CMHP,...
                YH2>=eps*eye(n_y),...
                trace(YH2)<=pH2,...
                pH2>=eps ];
    LMIs_CMHP = [LMIs_CMHP,...
        [ -YH2, Tilde_Cy*XP+D_y*WP; XP'*Tilde_Cy'+WP'*D_y', -XP ]<=...
            -eps*eye(n_y+n_ola,n_y+n_ola) ]        
end

if ~isempty(c_Hinf)
    pHinf = sdpvar(1,1,'symmetric');   
    LMIs_CMHP = [ LMIs_CMHP,...
                pHinf>=eps,...
                [   Tilde_Ax*XP+XP*Tilde_Ax'+Tilde_Bu*WP+WP'*Tilde_Bu',...
                    Tilde_Bd, XP*Tilde_Cz'+WP'*D_z';...
                    Tilde_Bd', -pHinf*eye(n_d), E_z';...
                    Tilde_Cz*XP+D_z*WP,...
                    E_z, -pHinf*eye(n_z)...
                ]<=-eps*eye(n_ola+n_d+n_z)...
            ];
end

if ~isempty(c_H2)
     if ~isempty(c_Hinf)
        optimize(LMIs_CMHP,c_H2*pH2+c_Hinf*pHinf,Yalmip_sdpsettings); 
     else
         optimize(LMIs_CMHP,c_H2*pH2,Yalmip_sdpsettings);
     end
else
    if ~isempty(c_Hinf)
        optimize(LMIs_CMHP,c_Hinf*pHinf,Yalmip_sdpsettings); 
     else
         optimize(LMIs_CMHP,[],Yalmip_sdpsettings);
     end
end

optimal_WP = value(WP);
optimal_XP = value(XP);
KD_parcial=optimal_WP*inv(optimal_XP);
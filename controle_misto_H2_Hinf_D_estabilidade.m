%Programa para executar controle otimo misto com alocacao livre de polos.    

XD  = sdpvar(n_x,n_x,'symmetric');
WD  = sdpvar(n_u,n_x,'full');
LMIs_CMHD = XD>=eps*eye(n_x);

if ~isempty(alpha_v)
    Ax_Valpha = A_x+alpha_v*eye(n_x);
    LMIs_CMHD = [ LMIs_CMHD, Ax_Valpha*XD+XD*Ax_Valpha'+...
             B_u*WD+WD'*B_u'<=-eps*eye(n_x)  ];
end

if ~isempty(beta_v)
    Ax_Vbeta = -A_x-beta_v*eye(n_x);
    LMIs_CMHD = [ LMIs_CMHD, Ax_Vbeta*XD+XD*Ax_Vbeta'-...
             B_u*WD-WD'*B_u'<=-eps*eye(n_x) ];
end

if ~isempty(r_d)
    Ax_Dqr = A_x+q_d*eye(n_x); 
    LMIs_CMHD = [ LMIs_CMHD,...
            [ -r_d*XD, Ax_Dqr*XD+B_u*WD;...
              XD*Ax_Dqr'+WD'*B_u', -r_d*XD ]...
              <=-eps*eye(2*n_x)    ];
end

if ~isempty(w_H)
    LMIs_CMHD =[ LMIs_CMHD,...
            [ -w_H*XD,...
              XD*A_x'-A_x*XD+...
              WD'*B_u'-B_u*WD;...
              A_x*XD-XD*A_x'+...
              B_u*WD-WD'*B_u',...
              -w_H*XD...
            ]<=-eps*eye(2*n_x) ];
end

if ~isempty(theta_s)
    Ax_sin = A_x*sin(theta_s);
    Ax_cos = A_x*cos(theta_s);
    Bu_sin = B_u*sin(theta_s);
    Bu_cos = B_u*cos(theta_s);
    LMIs_CMHD =[ LMIs_CMHD,...
            [ Ax_sin*XD+XD*Ax_sin'+...
              Bu_sin*WD+WD'*Bu_sin',...
              Ax_cos*XD-XD*Ax_cos'+...
              Bu_cos*WD-WD'*Bu_cos';...
              XD*Ax_cos'-Ax_cos*XD+...
              WD'*Bu_cos'-Bu_cos*WD,...
              Ax_sin*XD+XD*Ax_sin'+...
              Bu_sin*WD+WD'*Bu_sin'...
            ]<=-eps*eye(2*n_x) ];
end

 if ~isempty(e_P)
    Ax_Pe = (Lambda-e_P*eye(n_x))/2;                
    LMIs_CMHD = [ LMIs_CMHD,...
                [   Ax_Pe*XD+XD*Ax_Pe'+...
                    B_u/2*WD+WD'*B_u'/2,...
                    -A_x*XD-B_u*WD;...
                    -XD*A_x'-WD'*B_u',...
                    A_x*XD/2+XD*A_x'/2+...
                    B_u/2*WD+WD'*B_u'/2 ...
                ]<=-eps*eye(2*n_x)...
            ];    
end

if ~isempty(c_H2)

    YH2 = sdpvar(n_y,n_y,'symmetric');
    pH2 = sdpvar(1,1,'symmetric');   
    LMIs_CMHD = [ LMIs_CMHD, A_x*XD+XD*A_x'+...
             B_u*WD+WD'*B_u'+...
             B_d*B_d'<=-eps*eye(n_x) ];
    LMIs_CMHD = [ LMIs_CMHD,...
                YH2>=eps*eye(n_y),...
                trace(YH2)<=pH2,...
                pH2>=eps ];
    LMIs_CMHD = [LMIs_CMHD,...
        [ -YH2, C_y*XD+D_y*WD; XD'*C_y'+WD'*D_y', -XD ]<=...
            -eps*eye(n_y+n_x,n_y+n_x) ];        
end

if ~isempty(c_Hinf)
    pHinf = sdpvar(1,1,'symmetric');   
    LMIs_CMHD = [ LMIs_CMHD,...
                pHinf>=eps,...
                [   A_x*XD+XD*A_x'+B_u*WD+WD'*B_u',...
                    B_d, XD*C_z'+WD'*D_y';...
                    B_d', -pHinf*eye(n_d), E_z';...
                    C_z*XD+D_z*WD,...
                    E_z, -pHinf*eye(n_z)...
                ]<=-eps*eye(n_x+n_d+n_z)...
            ];
end

if ~isempty(c_H2)
     if ~isempty(c_Hinf)
        optimize(LMIs_CMHD,c_H2*pH2+c_Hinf*pHinf, Yalmip_sdpsettings); 
     else
         optimize(LMIs_CMHD,c_H2*pH2,Yalmip_sdpsettings);
     end
else
    if ~isempty(c_Hinf)
        optimize(LMIs_CMHD,c_Hinf*pHinf,Yalmip_sdpsettings); 
     else
         optimize(LMIs_CMHD,[],Yalmip_sdpsettings);
     end
end

optimal_WD = value(WD);
optimal_XD = value(XD);
Kpf_livre=optimal_WD/optimal_XD;